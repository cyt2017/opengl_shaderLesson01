1、vs："gl_Position = ftransform();"
	使用该语句，是对顶点做矩阵变换处理。（gl_Position）是shader中的内置变量；（ftransform()）是内置函数。

2、ps："gl_FragColor = vec4(1,0,0,1);"
	使用该语句，是对图像进行着色处理。（gl_FragColor）是shader中的内置输出颜色的成员变量，（vec4(1,0,0,1)）表示拥有四个float（0~1）变化的变量。

3、_colorLoc = glGetUniformLocation ( _programId, "_color" );
	使用（glGetUniformLocation）是用来获取（uniform）变量的位置<句柄>。

4、varying关键字：作用是从顶点shader到片元shader之间变量传递。
	注意：在传递过程中变量的类型和名称必须保持一致。
	例如：
		vs："varying    float   v_lifetime;"
		ps："varying    float   v_lifetime;"

5、vs中的函数使用次数 = 绘制三角形的个数 * 2；

6、每个顶点可使用两组颜色：例如：
    vs：定义：
	"varying    vec4   outColor0;"
	"varying    vec4   outColor1;"
	初始化：
	"outColor0 = gl_Color；"
	"outColor1 = gl_SecondaryColor；"
    ps：使用
	"varying    vec4   outColor0;"
	"varying    vec4   outColor1;"
	"gl_FragColor = outColor0 + outColor1;"

7、纹理：
	"uniform    sampler2D   _texture;"
	只能在ps（片元）shader中使用。

8、法线：
   --1、面法线：法线一定是三个坐标，法线垂直于面，但是两个面使用法线过度生硬。
   --2、点法线：法线一定是三个坐标，一个点被两个面共有，过度平滑，使用更多。
	法线使能函数：（glEnableClientState）法线矩阵可以用来写入以及调用glDrawArrays方法或者glDrawElements方法时进行渲染。
	     glEnableClientState（GL_NORMAL_ARRAY）；
	法线使用函数：（glNormalPointer）传递给顶点shader
	     glNormalPointer（GL_FLOAT,sizeof(Vertex）,&rect[0].nx);
	在vs中使用法线数据：
	    "outColor0 = vec4(gl_Normal,1)；"  此时把法线变量当做颜色使用

9、shader中的内置变量：
	vec4 	gl_Position;	顶点位置
	float	gl_PointSize;	点大小
	vec4	gl_ClipVertex;
   ps中独有的内置变量：
	vec4	gl_FragCoord;	雾化
	bool	gl_FrontFacing;	面
	vec4	gl_FragColor;	颜色
	vec4	gl_FragData[gl_MaxDrawBuffers];	多个缓冲区会用到
	float	gl_FragDepth;	深度

10、attribute关键字：
	启用attribute类型数据：
	_lifetimeLoc = glGetAttribLocation ( _programId, "_lifetime" );
	给attribute类型数据传递：
	glVertexAttribPointer ( _shader._lifetimeLoc, 1, GL_FLOAT,   GL_FALSE, PARTICLE_SIZE * sizeof(GLfloat), _particleData );

11、in\out关键字：在传递时，变量名称也可以不一样。
	vs：
	   "in 	vec3	_position;"
	   "in 	vec4	_color;"
	   "out vec4	_outColor;"
	ps:
	   "in	vec4	_outColor;"
	
12、layout关键字：相当于指明一个索引，在给shader输入数据时，(glVertexAttribPointer)函数中第一个变量可以直接使用layout指明的索引号。
	vs：
	   "#version	330"	版本号，在此版本下layout关键字只能在vs中使用。
	   "layout(location=0)	in	vec3	_position;"
	   "layout(location=1)	in	vec4	_color;

	   "#version 410"	版本中，layout可用在vs和ps之间的数据传递，也可以让变量名称不同，但是layout(location=?)中"?"，一定要相同，而且"?"的取值范围（0~40）。

13、block块：解决两个问题：
	--1、uniform内存拷贝问题；
	--2、不同shader之间共用一个变量问题。
	shader的vs：使用block
		"uniform	MVP"
		"{"
			"mat4	mat;"
		"}mvp;"
	访问句柄时，只能用上面函数中大写的"MVP",而在vs程序中要使用上面函数中小写的"mvp"。例如：
	访问句柄：
	_mvp	= glGetAttribLocation ( _programId, "MVP" );

	绑定并使用块（block）：下面函数中的"0",表示绑定点，两个函数的绑定点一定要相同。
	glUniformBlockBinding (_shader._program,_shader._mvp,0);
	glBindBufferBase(GL_UNIFORM_BUFFER,0,_ubo);
	
14、block块:内存布局：
	根据版本（shared,packed,std140,std430）不同，决定内存的存储方式。
	shared:默认的存储方式；
	packed:自定义的存储方式；
	std140:常用的存储方式；
	
	使用：	
		"layout（shared）    uniform	MVP"
		"{"
			"mat4	mat;"
		"}mvp;"
	获得使用多少内存的函数：（glGetActiveUniformBlockiv）；
	glGetActiveUniformBlockiv(_program,_mvp,GL_UNIFORM_BLOCK_DATA_SIZE,&blockSize);

15、无数据绘制：
	void render()
	{
		CELL::matrix4	prj = CELL::ortho<float>(0,float(_width),float(_height),0,-100.0f,100);
		_shader.begin();
		{
			glUniformMatrix4fv ( _shader._mvp, 1,GL_FALSE,prj.data());
			glDrawArrays( GL_TRIANGLE_STRTP, 0, 4);
		}
		_shader.end();
	}
	
	vs:
	   "const  vec3 _pos[4] = vec3[](vec3(10,10,0), vec3(410,10,0),vec3(10,410,0),vec3(410,410,0));"
	   "gl_Position = _mvp * vec4(_pos[gl_VertexID],1.0);"

16、discard不绘制像素：
	使用：ps:
		"if（_color.a<0.2)	discard;"

17、opengl中顺时针摆放顶点坐标，显示出来是背面的颜色；
	    逆时针摆放顶点坐标，显示出来是正面的颜色。
	ps：判断是正面还是反面？正面显示红色，背面显示绿色。
	   "  gl_FragColor   =  GL_FrontFacing ? vec4(1,0,0,1) : vec4(0,1,0,1) ;"	

18、纹理帧动画：
	播放多帧图像：--1、1s播放的帧数；--2、每帧话哪部分，这时改变纹理坐标。





